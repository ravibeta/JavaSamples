buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            url "https://repo1.maven.org/maven2"
        }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:${shadowJarVersion}"
        classpath "com.palantir.gradle.docker:gradle-docker:${palantirDockerPluginVersion}",
                  "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
    }

}

plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'io.freefair.lombok' version '3.1.0'
    id 'com.gradle.build-scan' version '2.0.2'
    id 'com.palantir.docker' version '0.25.0'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
}


group='com.dellemc.pravega.app'
version = '1.0'
sourceSets.main.java.srcDirs = ['src']
mainClassName = 'com.dellemc.pravega.app.StreamDuplicity'
applicationName = 'StreamDuplicity'


repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            url "https://oss.jfrog.org/artifactory/oss-release-local"
        }
        maven {
            url "https://repo1.maven.org/maven2"
        }
}

sourceCompatibility = 1.8
dependencies {
    compile "io.pravega:pravega-client:${connectorVersion}"
    compile "io.pravega:pravega-common:${connectorVersion}",
            "io.pravega:pravega-keycloak-client:${connectorVersion}",
            "commons-cli:commons-cli:1.4"
    implementation platform('software.amazon.awssdk:bom:2.13.0')
    implementation 'software.amazon.awssdk:s3'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.24'
    compile group: 'org.slf4j', name:'slf4j-api', version: '1.7.24'
    compile group: 'com.jayway.jsonpath', name:'json-path', version:'2.1.0'
    compile "org.apache.commons:commons-text:${commonsTextVersion}",
            "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}",
            "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}",
            "com.fasterxml.jackson.module:jackson-module-kotlin:${kotlinJacksonModule}",
            "javax.inject:javax.inject:1",
            "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}",
            "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}",
            "com.google.inject:guice:4.0",
            "io.dropwizard:dropwizard-core:${dropWizardVersion}",
            "io.dropwizard:dropwizard-configuration:${dropWizardVersion}"
    compile   "javax.xml.bind:jaxb-api:2.3.1"
    testCompile "junit:junit:4.+"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

sourceCompatibility = 1.8

sourceSets {
    intgTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }
}

idea {
    module {
        testSourceDirs += file('src/intgTest/java')
        testSourceDirs += file('src/intgTest/resources')
    }
}

String classpathVar = configurations.compile.collect { it.getName() }.join(' ');
jar {
    manifest {
        attributes 'Implementation-Title': 'StreamDuplicity',
                'Implementation-Version': version,
                'Main-Class': 'com.dellemc.pravega.app.StreamDuplicity',
		'Class-Path': classpathVar
    }
    baseName = project.name 
    mainClassName = 'com.dellemc.pravega.app.StreamDuplicity'
    from sourceSets.main.output
    from {
        configurations.runtimeClasspath.findAll { System.err.println(it.name); it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    zip64=true
}

apply plugin: "maven-publish"
publishing {
    repositories {
        maven {
            url = "http://localhost:9090/maven2"
            credentials {
                username ""
                password ""
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = 'com.dellemc.pravega.app.StreamDuplicity'
            artifactId = 'StreamDuplicity'
            version = '1.0'

            from components.java
        }
    }
}


project.ext.buildVersion = computeVersion()

def computeVersion() {
    return "0.1-SNAPSHOT"
}

configurations.all {
    // exclude group: "io.netty", module:"netty-all"
    // exclude group: "org.apache.logging.log4j", module: "log4j-slf4j-impl"
    //  exclude group: "org.slf4j", module: "log4j-over-slf4j"
}

configurations {
    intgTestCompile.extendsFrom testCompile
    intgTestRuntime.extendsFrom testRuntime
}

// task integrationTest(type: Test) {
//    description = "Runs Integration Tests"
//    testClassesDir = sourceSets.intgTest.output.classesDir
//    classpath += sourceSets.intgTest.runtimeClasspath
//    outputs.upToDateWhen { false }
// }

shadowJar {
   mergeServiceFiles()
   baseName = 'streamduplicity'
   version = buildVersion
}

docker {
    name "${dockerRegistry}/${dockerImageName}:${buildVersion}"
    tag 'dev', "${dockerRegistry}/${dockerImageName}:${buildVersion}"
    dockerfile file('Dockerfile')
    // inputDir = file('.')
    files shadowJar.outputs, 'src/main/resources/config.properties'
    buildArgs([BUILD_VERSION: project.buildVersion])
    copySpec.from("build/libs").into("/app/lib")
    copySpec.from("build/resources/main").into("/app/conf")
    copySpec.from("src/main/resources/config.properties").into("/app/conf/config.properties")
    copySpec.from("src/main/resources/config.properties").into("/data/config/config.properties")
    copySpec.from("build/libs/streamduplicity-${buildVersion}-all.jar").into("/app/lib/streamduplicity.jar")
    copySpec.from("src/conf/logback.xml").into("/app/conf/logback.xml")
    pull true
    noCache true
}
